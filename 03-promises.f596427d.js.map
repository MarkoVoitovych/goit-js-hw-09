{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,G,kBAKlB,IAAMC,GAAgBC,EAAMC,MAAQC,EAAIC,EAAKF,MAC7CG,YAAW,WAYf,IAAuBC,EAAUC,GAAVD,EAXHH,EAWaI,EAXVP,EAYCQ,KAAKC,SAAW,GAE7BC,QAAQC,QAAQ,CAAEL,WAAUC,UAE5BG,QAAQE,OAAO,CAAEN,WAAUC,WAf7BM,MAAK,SAAAC,IA4Bd,SAAuBR,EAAUC,GAC/Bd,EAAAsB,OAAOC,QAAQ,uBAAsCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,MAAK,CAC9DW,QAAS,IACTC,cAAc,EACdC,cAAc,EACdC,oBAAoB,G,CAhCdC,CADeR,EAARR,SAAeQ,EAALP,M,IAGlBgB,OAAM,SAAAT,IAgBf,SAAuBR,EAAUC,GAC/Bd,EAAAsB,OAAOS,QAAQ,sBAAuCP,OAAfX,EAAS,QAAYW,OAANV,EAAM,MAAK,CAC7DW,QAAO,IACTC,cAAc,EACdC,cAAc,EACdC,oBAAoB,G,CApBdI,CADgBX,EAARR,SAAeQ,EAALP,M,MAGrBP,E,EAbLD,EAAE2B,iBAGF,IAFA,IAAgCC,EAAA5B,EAAE6B,cAAcC,SAAxC5B,EAAwB0B,EAAxBpB,MAAOH,EAAiBuB,EAAjBvB,KAAM0B,EAAWH,EAAXG,OAEZC,EAAI,EAAGA,GAAKD,EAAO5B,MAAO6B,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = e.currentTarget.elements;\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    const currentDelay = +delay.value + i * step.value;\n    setTimeout(() => {\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) => {\n          notifySuccess(position, delay);\n        })\n        .catch(({ position, delay }) => {\n          notifyFailure(position, delay);\n        });\n    }, currentDelay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    return Promise.resolve({ position, delay });\n  } else {\n    return Promise.reject({ position, delay });\n  }\n}\n\nfunction notifyFailure(position, delay) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n    timeout: 4000,\n    clickToClose: true,\n    pauseOnHover: false,\n    showOnlyTheLastOne: false,\n  });\n}\n\nfunction notifySuccess(position, delay) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n    timeout: 4000,\n    clickToClose: true,\n    pauseOnHover: false,\n    showOnlyTheLastOne: false,\n  });\n}"],"names":["$h6c0i","parcelRequire","form","document","querySelector","addEventListener","e","currentDelay","delay1","value","i","step","setTimeout","position","delay","Math","random","Promise","resolve","reject","then","param","Notify","success","concat","timeout","clickToClose","pauseOnHover","showOnlyTheLastOne","$ce04d3a99e08e73b$var$notifySuccess","catch","failure","$ce04d3a99e08e73b$var$notifyFailure","preventDefault","_elements","currentTarget","elements","amount","i1","_loop"],"version":3,"file":"03-promises.f596427d.js.map"}